name: Build and Test

on:
  push:
    branches: ['main']
    paths:
      - '**/*.ts'
      - '!docs/**'
      - 'deno.json'
      - 'deno.lock'
      - '.github/workflows/test.yml'
  pull_request:
    branches: ['main']
    paths:
      - '**/*.ts'
      - '!docs/**'
      - 'deno.json'
      - 'deno.lock'
      - '.github/workflows/test.yml'

env:
  DENO_VERSION: 'v2.3.6'

jobs:
  test:
    name: 'Test and Build on ${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Configure Git for consistent line endings
        run: |
          git config core.autocrlf false
          git config core.eol lf

      - name: 🦕 Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: 📦 Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/deno
            ~/.deno
          key: ${{ runner.os }}-deno-${{ env.DENO_VERSION }}-${{ hashFiles('**/deno.lock', '**/deno.json') }}
          restore-keys: |
            ${{ runner.os }}-deno-${{ env.DENO_VERSION }}-
            ${{ runner.os }}-deno-

      - name: 📥 Verify lock file and cache dependencies
        run: deno cache --frozen cli.ts daemon.ts

      - name: 🔬 Lint and Format Check
        run: |
          deno task lint
          deno task fmt --check

      - name: 📝 Type Check
        run: deno task check

      - name: 🧪 Run Full Test Suite
        # --no-check is used because we have a dedicated type-checking step
        run: deno task test --no-check

      - name: 📊 Analyze Test Coverage (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: deno task coverage

      - name: 🔨 Build Native Platform Binaries
        shell: bash
        run: |
          mkdir -p build-native

          # Build native binaries for this platform only
          if [ "${{ matrix.platform }}" = "windows" ]; then
            echo "Building Windows binaries..."
            deno compile --allow-all --include vibe-coding-project-starters/ --output build-native/vibe-windows-x86_64.exe cli.ts
            deno compile --allow-all --output build-native/vibectl-windows-x86_64.exe daemon.ts
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            echo "Building macOS binaries..."
            deno compile --allow-all --include vibe-coding-project-starters/ --output build-native/vibe-macos-x86_64 cli.ts
            deno compile --allow-all --output build-native/vibectl-macos-x86_64 daemon.ts
          else
            echo "Building Linux binaries..."
            deno compile --allow-all --include vibe-coding-project-starters/ --output build-native/vibe-linux-x86_64 cli.ts
            deno compile --allow-all --output build-native/vibectl-linux-x86_64 daemon.ts
          fi

          # List what we built
          ls -la build-native/

      - name: 📦 Cache Native Platform Binaries
        uses: actions/cache/save@v4
        with:
          path: build-native/
          key: native-binaries-${{ matrix.platform }}-${{ github.sha }}

  build-installers:
    name: 'Build Self-Contained Installers'
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦕 Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: 📥 Cache dependencies
        run: deno cache --frozen cli.ts daemon.ts

      - name: 🔨 Build cross-platform binaries for embedding
        run: deno task build:cross-platform

      - name: 🔨 Build platform-specific installers
        run: deno task build:installers

      - name: 📦 Cache Self-Contained Installers
        uses: actions/cache/save@v4
        with:
          path: build/install-dotvibe*
          key: installers-${{ github.sha }}

      - name: 📊 Show installer sizes
        run: |
          echo "Installer sizes:"
          ls -lh build/install-dotvibe* || echo "No installers found"
