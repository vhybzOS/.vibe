name: Build and Test

on:
  push:
    branches: ['main']
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - 'deno.json'
      - 'deno.lock'
      - '.github/workflows/test.yml'
  pull_request:
    branches: ['main']
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - 'deno.json'
      - 'deno.lock'
      - '.github/workflows/test.yml'

env:
  DENO_VERSION: 'v2.3.6'

jobs:
  build:
    name: 'Build & Test on ${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦕 Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: 📦 Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: ~/.deno/deps
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: 🔬 Lint and Format Check
        run: |
          deno task lint
          deno task fmt --check

      - name: 📝 Type Check
        run: deno task check

      - name: 🧪 Run Full Test Suite
        run: deno task test

      - name: 📊 Generate and Upload Coverage (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          deno coverage --lcov --output=coverage.lcov coverage/

      - name: 📈 Upload Coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.lcov
          fail_ci_if_error: false

  release-check:
    name: 🚀 Release Readiness Check
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦕 Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: 📦 Restore Deno Cache
        uses: actions/cache@v4
        with:
          path: ~/.deno/deps
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.lock') }}

      - name: 🔨 Test Build Process
        run: |
          deno task build
          deno task build:daemon
          # Verify executables were created
          ./vibe --version
          ./vibe-daemon --version

      - name: ✅ Final Sanity Check
        run: echo "All checks passed. Ready for release."
