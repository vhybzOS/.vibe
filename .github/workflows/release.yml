name: Build and Release

on:
  push:
    branches: [main]
    paths: ['deno.json']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.2.0'

env:
  DENO_VERSION: 'v2.3.6'

jobs:
  check-version:
    name: 'Check Version Change'
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.version-changed }}
      new-version: ${{ steps.version-check.outputs.new-version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Check if version changed
        id: version-check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "new-version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          CURRENT_VERSION=$(jq -r '.version' deno.json)
          PREVIOUS_VERSION=$(git show HEAD~1:deno.json | jq -r '.version' 2>/dev/null || echo "")

          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && [ "$CURRENT_VERSION" != "" ]; then
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "new-version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "🚀 Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "version-changed=false" >> $GITHUB_OUTPUT
            echo "📋 No version change detected"
          fi

  build:
    name: 'Build Cross-Platform Binaries'
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦕 Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: 📦 Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/deno
            ~/.deno
          key: ${{ runner.os }}-deno-${{ env.DENO_VERSION }}-${{ hashFiles('**/deno.lock', '**/deno.json') }}
          restore-keys: |
            ${{ runner.os }}-deno-${{ env.DENO_VERSION }}-
            ${{ runner.os }}-deno-

      - name: 📥 Cache dependencies
        run: deno cache --frozen cli.ts daemon.ts

      - name: 🔨 Build Linux binaries
        run: |
          deno compile --allow-all --target x86_64-unknown-linux-gnu --output build/vibe-${{ needs.check-version.outputs.new-version }}-linux-x86_64 cli.ts
          deno compile --allow-all --target x86_64-unknown-linux-gnu --output build/vibectl-${{ needs.check-version.outputs.new-version }}-linux-x86_64 daemon.ts

      - name: 🔨 Build macOS binaries
        run: |
          deno compile --allow-all --target x86_64-apple-darwin --output build/vibe-${{ needs.check-version.outputs.new-version }}-macos-x86_64 cli.ts
          deno compile --allow-all --target x86_64-apple-darwin --output build/vibectl-${{ needs.check-version.outputs.new-version }}-macos-x86_64 daemon.ts

      - name: 🔨 Build Windows binaries
        run: |
          deno compile --allow-all --target x86_64-pc-windows-msvc --output build/vibe-${{ needs.check-version.outputs.new-version }}-windows-x86_64.exe cli.ts
          deno compile --allow-all --target x86_64-pc-windows-msvc --output build/vibectl-${{ needs.check-version.outputs.new-version }}-windows-x86_64.exe daemon.ts

      - name: 📦 Verify binaries created
        run: |
          ls -la build/
          file build/* || true

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.new-version }}
          name: Release ${{ needs.check-version.outputs.new-version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            build/vibe-${{ needs.check-version.outputs.new-version }}-linux-x86_64
            build/vibectl-${{ needs.check-version.outputs.new-version }}-linux-x86_64
            build/vibe-${{ needs.check-version.outputs.new-version }}-macos-x86_64
            build/vibectl-${{ needs.check-version.outputs.new-version }}-macos-x86_64
            build/vibe-${{ needs.check-version.outputs.new-version }}-windows-x86_64.exe
            build/vibectl-${{ needs.check-version.outputs.new-version }}-windows-x86_64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
